---
stand_alone: true
docname: draft-iab-iotsi-workshop-02
cat: info
submissiontype: IETF
pi:
  compact: 'yes'
  text-list-symbols: o*+-
  subcompact: 'no'
  sortrefs: 'yes'
  symrefs: 'yes'
  strict: 'yes'
  toc: 'yes'
title: Report from the Internet of Things (IoT) Semantic Interoperability (IOTSI)
  Workshop 2016
abbrev: draft-iab-iotsi-workshop
date: 2018-03-19
author:
- ins: J. Jimenez
  name: Jaime Jimenez
  org: Ericsson
  email: jaime.jimenez@ericsson.com
- ins: H. Tschofenig
  name: Hannes Tschofenig
  org: Arm Ltd.
  email: hannes.tschofenig@arm.com
- ins: D. Thaler
  name: Dave Thaler
  org: Microsoft
  email: dthaler@microsoft.com
informative:
  RFC3444:
  Allseen-Plugin:
    title: Using the AllJoyn Studio Extension
    author:
    - ins: B. Rockwell
      name: B. Rockwell
      org: ''
    date: 2016
  HATEOAS:
    target: https://www.iab.org/wp-content/IAB-uploads/2016/03/2016-IAB-HATEOAS.pdf
    title: Semantic Interoperability Requires Self-describing Interaction Models
      - HATEOAS for the Internet of Things
    author:
    - ins: M. Kovatsch
      name: M. Kovatsch
      org: ''
    date: 2016
    seriesinfo:
      Proceedings: of the IoT Semantic Interoperability Workshop 2016
  AllSeen:
    target: https://www.iab.org/wp-content/IAB-uploads/2016/03/AllSeen-summary-IOTSI.pdf
    title: Summary of AllSeen Alliance Work Relevant to Semantic Interoperability
    author:
    - ins: D. Thaler
      name: D. Thaler
      org: ''
    date: 2016
  BridgeTaxonomy:
    target: https://www.iab.org/wp-content/IAB-uploads/2016/03/DThaler-IOTSI.pdf
    title: IoT Bridge Taxonomy
    author:
    - ins: D. Thaler
      name: D. Thaler
      org: ''
    date: 2016
  IOTSIAG:
    target: https://www.iab.org/activities/workshops/iotsi/agenda/
    title: IoT Workshop for Semantic Interoperability (IOTSI) - Agenda and Slides
    author:
    - org: IAB
    date: 2016
  IOTSIGIT:
    target: https://github.com/iotsi/iotsi
    title: Github Collaborative Repository
    author:
    - org: IOTSI
    date: 2016
  IOTSIWS:
    target: https://www.iab.org/activities/workshops/iotsi/
    title: IoT Workshop for Semantic Interoperability (IOTSI) 2016 - Main Page and
      Position Papers
    author:
    - org: IAB
    date: 2016
  LWM2M-Schema:
    title: OMA LWM2M XML Schema
    author:
    - org: OMA
    date: 2018
  OMNA:
    title: OMNA Lightweight M2M (LWM2M) Object & Resource Registry
    author:
    - org: OMA
    date: 2018
  SIG:
    target: https://www.bluetooth.com/specifications/gatt
    title: GATT Specifications
    author:
    - org: Bluetooth SIG
    date: 2018
  PYANG:
    title: An extensible YANG validator and converter in python
    author:
    - ins: M. Bjorklund
      name: M. Bjorklund
      org: ''
    date: 2016
  UDI:
    target: https://www.iab.org/wp-content/IAB-uploads/2016/03/UDI-Position-Paper-OO-Approach-to-IoT-Interoperability.pdf
    title: Object Oriented Approach to IoT Interoperability
    author:
    - ins: M. Kohanim
      name: M. Kohanim
      org: ''
    date: 2016
    seriesinfo:
      Proceedings: of the IoT Workshop for Semantic Interoperability (IOTSI)
  nRF-Sniffer:
    title: nRF Sniffer - Smart/Bluetooth low energy packet sniffer
    author:
    - org: Nordic Semiconductor
    date: 2016
  AllJoynExplorer:
    title: AllJoyn Explorer
    author:
    - org: Microsoft
    date: 2016
  OpenDOF:
    target: https://opendof.org
    title: The OpenDOF Project
    author:
    - org: OpenDOF
    date: 2015

--- abstract


This document provides a summary of the 'Workshop on Internet of
Things (IoT) Semantic Interoperability (IOTSI)',
which took place in Santa Clara, CA, on March 17-18, 2016.  The main
goal of the workshop was to foster a discussion on the different
approaches used by companies and standards developing organizations (SDOs)
to accomplish interoperability at the application layer.  This report
summarizes the discussions, and lists recommendations to the standards
community.  The views and positions in this report are those of the
workshop participants and do not necessarily reflect those of the
authors and the Internet Architecture Board (IAB), which organized
the workshop.

--- middle

# Introduction {#section-1}

The Internet Architecture Board (IAB) holds occasional workshops
designed to consider long-term issues and strategies for the
Internet, and to suggest future directions for the Internet
architecture.  The investigated topics often require coordinated
efforts of many organizations and industry bodies to improve an
identified problem.  One of the targets of the workshops is to
establish communication between relevant organizations, especially
when the topics are out of the scope for the Internet Engineering
Task Force (IETF).  This long-term planning function of the IAB is
complementary to the ongoing engineering efforts performed by working
groups of the IETF.

With the expansion of the Internet of Things (IoT), interoperability
becomes more and more important. Standards developing organizations (SDOs)
have done a tremendous amount of work to standardize new protocols,
and to profile existing protocols.

At the application layer and at the level of solution frameworks, 
interoperability is not yet mature. Particularly, the
work on data formats (in the form of data models and information
models) has not seen the same level of consistency throughout
SDOs.

One common problem is the lack of an encoding-independent standardization
of the information, the so-called information model. Another problem is
the strong relationship with the underlying communication architecture,
such as an Remote Procedure Call (RPC) or a RESTful design. Furthermore, groups develop
solutions that are very similar on the surface but differ slightly in their standardized outcome, leading to interoperability
problems. Finally, some groups favor different encodings for use with
various application layer protocols.

Thus, the IAB decided to organize a workshop to reach out to relevant
stakeholders to explore the state-of-the-art and to identify
commonality and gaps {{IOTSIAG}}, {{IOTSIWS}}. In particular, the IAB was
interested to learn about the following aspects:

* What is the state of the art in data and information models? What should
  an information model look like?

* What is the role of formal languages, such as schema languages, in
  describing information and data models?

* What is the role of metadata, which is attached to data to make it self-describing?

* How can we achieve interoperability when different organizations, companies
  and individuals develop extensions?

* What is the experience with interworking various data models developed
  from different groups, or with data models that evolved over time?

* What functionality should online repositories for sharing schemas have?

* How can existing data models be mapped against each other to offer interworking?

* Is there room for harmonization, or are the use cases of different groups
  and organizations so unique that there is no possibility for cooperation?

* How can organizations better work together to increase awareness and information sharing?

# Terminology {#section-2}

The first roadblock to interoperability at the level of data models is the lack of a
common vocabulary to start the discussion.
{{RFC3444}} provides a starting point by separating conceptual models for designers,
or "information models", from concrete detailed definitions for implementers, or
"data models". There are concepts that are
undefined in that RFC and elsewhere, such as the interaction with the
resources of an endpoint, or "interaction model".  Therefore the three
"main" common models that were identified were:

{: hangIndent='3'}
Information Model
: An information model defines an environment at the highest level of abstraction, they
  express the desired functionality.
  They can be defined informally (e.g., in plain English) or more
  formally (e.g., UML, Entity-Relationship Diagrams, etc.).
  Implementation details are hidden.
{: vspace='0'}

{: hangIndent='3'}
Data Model
: A data model defines concrete data representations at a lower level of
  abstraction, including implementation and protocol-specific details.
  Some examples are: SNMP Management Information
  Base (MIB) modules, W3C Thing Description (TD) Things, YANG models, LWM2M
  Schemas, OCF Schemas and so on.
{: vspace='0'}

{: hangIndent='3'}
Interaction Model
: An interaction model defines how data is accessed and retrieved from the endpoints,
  being therefore tied to the specific
  communication pattern that the system has (e.g., REST methods,
  Publish/Subscribe operations, or RPC calls).
{: vspace='0'}

Another identified terminology issue is the semantic meaning overload
that some terms have.  The meaning can vary depending on the context in which the
term is used.  Some examples of such terms are: semantics, models,
encoding, serialization format, media types or encoding types.  Due
to time constraints, no concrete terminology was agreed upon, but
work will continue within each organization to create various
terminology documents.  The participants agreed to set up a github repository
{{IOTSIGIT}} for sharing information.

# What Problems to Solve {#section-4}

The participants agreed that there is not simply a single problem to be solved, but
rather a range. During the workshop the following problems were discussed:

* Formal Languages for Documentation Purposes

To simplify review and publication, SDOs need
formal descriptions of their data and interaction models.
Several of them use a tabular representation found in the specification itself,
but use a formal language as an alternative way of describing objects and resources
for formal purposes.  Some examples of formal language use are as follows.

The Open Mobile Alliance (OMA), now OMA SpecWorks,
used an XML schema {{LWM2M-Schema}} to describe their object
and resource definitions. The XML files of standardized objects are available for download at
{{OMNA}}.

The Bluetooth SIG defined Generic Attributes (GATT) services and characteristics for use with 
Bluetooth Smart/Low Energy. The services and characteristics are shown in a tabular form on 
the Bluetooth SIG website at {{SIG}}, and are also defined as XML instance documents.

The Open Connectivity Foundation (OCF) uses JSON Schemas to formally define data models,
and RAML to define interaction models.  The standard files are available online
at OneIoTa.org.

The AllSeen Alliance uses AllJoyn Introspection XML to define data and interaction
models in the same formal language, tailored for RPC-style interation.  The standard
files are available online on the AllSeen Alliance web site, but both standard and
vendor-defined model files can be obtained by directly querying a device for them at runtime.

The World-Wide Web Consortium (W3C) uses the Resource Description Framework (RDF)
to define data and interaction models using a format tailored for the web.

The Internet Engineering Task Force (IETF) uses YANG to define data and interaction models.
Other SDOs may use various other formats.

* Formal Languages for Code Generation

Code generation tools that use formal data and information modelling languages
are needed by developers. For example, the Allseen Visual Studio
Plugin {{Allseen-Plugin}} offers a wizard to generate code based on
the formal description of the data model.  Another example of a data
modelling language that can be used for code generation is YANG.  A
popular tool to help with code generation of YANG modules is pyang {{PYANG}}.
An example of a tool that can do code generation for multiple ecosystems is
OpenDOF {{OpenDOF}}. Use cases discussed for code generation included easing
development of server-side device functionality, clients, and compliance tests.

* Debugging Support

Debugging tools are needed that implement generic object browsers, which
use standard data models and/or retrieve formal language descriptions
from the devices themselves. As one example, the
NRF Bluetooth Smart sniffer from Nordic Semiconductor {{nRF-Sniffer}} can be
used to display services and characteristics defined by the Bluetooth SIG.
As another example, AllJoyn Explorer {{AllJoynExplorer}} can be used to browse
and interact with any resource exposed by an AllJoyn device, including both
standard and vendor-defined data models, by retrieving the formal descriptions
from the device at runtime.

* Translation

The working assumption is that devices need to have a common data model 
with a priori knowledge of data types and actions. However that would imply 
that each consortia/organization will try to define their own, causing a major 
interoperability problem, if not a completely intractable one  given
the ammount of variations, extensions, compositions or versioning changes that
will happen on a per data model basis. 

Another potential approach is to have a minimal ammount of information on the
device to allow for a runtime binding to a specific model. The objective being
to require as little a prior knowledge as possible. 

Moreover, gateways, bridges  and other similar devices need to dynamically
translate (or map) one data model to another one. Complexity will increase 
as there are also multiple protocols and schemas that will make interoperability
harder to achieve. 


* Runtime Discovery

Runtime discovery allows IoT devices to exchange metadata about the data, potentially along with the
data exchanged itself. In some cases the metadata not only describe data but also the interaction model as well. 
An example of such an approach has been shown with HATEOAS {{HATEOAS}}.
Another example is that all AllJoyn devices support such runtime discovery
using a protocol mechanism called "introspection", where the metadata is 
queried from the device itself {{AllSeen}}.

There are various models, whether deployed or possible, for such discovery.
The metadata might be extracted from a specification, or looked up on a 
cloud repository (e.g., OneIoTa for OCF models), or looked up via a vendor's
site, or obtained from the device itself as (such as in the AllJoyn case).  The 
relevant metadata might be obtained from the same place, or different
pieces might be obtained from different places, such as obtaining separately
information such as (a) syntax information, (b) end-user descriptions in 
a desired language, and (c) developer-specific comments for implementers.

# Translation {#section-5}

In an ideal world where organizations and companies cooperate and agree on a
single data model standard, there is no need for gateways that translate from one data model
to the other one. However, this is far from reality today, and there are many
proprietary data models in addition to the already standardized ones. As a 
consequence, gateways are needed to translate between data models. This leads to 
n^2-n combinations, in the worse case. 

There are analogies with gateways back in the 1980s that were used to
translate between network layer protocols.  Eventually IP took over, providing
the necessary end-to-end interoperability at the network layer. Unfortunately,
the introduction of gateways leads to the loss of expressiveness
due to the translation between data models. The functionality of IP was so 
valuable in the market that advanced features of other networking 
protocols became less attractive and were not used anymore. 

Participants discussed an alternative, called 'red star' shown in {{red-star}}, 
where data models are translated to the data model shown in the middle. This 
reduces the number of translations that are needed down to 2n (in the best case). 
Of course, everyone wants to be the red star data model. 

~~~~
   +-----+                                        +-----+
   |     |                                        |     |
   |     |  --                                 -- |     |
   |     |    --                             --   |     |
   +-----+      --                         --     +-----+
                  --                    ---
                    --                --
                      --            --
                        --        --
     ---                  --    --                  ---
    /   \                   /o\                    /   \
   |     | ----------------/ooo\----------------  |     |
    \   /                  \ooo/                   \   /
     ---                  //\o/ --                  ---   
                        //        --
                      //            --
                    //                ---
                  //                     --
                //                         --
      /\      //                             --      /\
     / \    //                                 --   / \
    /   \  /                                       /   \
    /   \                                          /   \
   /------                                        /------
~~~~
{: #red-star title="The 'Red Star' in Data/Information Models."}

While the workshop itself was not a suitable forum to discuss the design of 
such translation model several questions were raised: 

 * Do we need a red star that does everything or could we design something that 
offers a more restricted functionality? 

 * How do we handle loss of data and loss of functionality? 

 * Should data be translated between data models or data models be translated? 

 * How can interaction models be translated? It needs to be dealt with in addition 
 to the data model. 

 * Many (if not all) data and interaction models have some bizarre functionality 
 that cannot be translated easily. How can those be handled? 

 * What limitations are we going to accept in these translations? 

 * When should translation happen? 

a)  Design time: a translation between data model
descriptions, such as translating a YANG model to a RAML/JSON model,
can be performed once, such as during design time.
A single information model can be mapped to a number of different data models.

b)  Run time: Runtime translation of values in two standard data models can only be
algorithmically done when the data model on one side is algorithmically derived
from the data model on the other side.  This is called a "derived model".
It was discussed that the availability of runtime discovery can aid in
semantic translation, such as when a vendor-specific data model on one
side of a protocol bridge is resolved and the translator can algorithmically 
derive the semantically-equivalent vendor-specific data model on the other
side of a protocol bridge, as discussed in {{BridgeTaxonomy}}.

The participants agreed that algorithm translation will generally require
custom code, whenever one is translating to anything other than a derived model.

Participants were under the impression that it is easier to translate data between systems that
follow the same communication architecture.

# Dealing with change {#section-6}

A large part of the workshop was dedicated to the evolution of
devices and server side applications.
Interactions between devices and services and how their relationship
evolves over time is complicated by their respective different 
interaction models.

The workshop discussed various approaches to deal with change.  In the most basic case, a
developer might use a description of an API and implement 
the protocol steps.  Sometimes the data or information model can be used to generate code stubs.  Subsequent changes to an API
require changes on the clients to upgrade to the new version, which
requires some development of new code to satisfy the needs of the new
API.

These interactions could be made machine-understandable in the first place,
enabling for changes to happen at runtime.
In that scenario, a machine client could discover the possible interactions with a
service, adapting to changes as they occur without specific code
being developed to adapt to them.

The challenge seems to be to code the human-readable specification into a machine-readable format.  Machine-readable languages require a shared vocabulary to
give meaning to the tags.

These types of interactions are often based on the REST architectural
style. Its principle is that a device or endpoint only needs a
single entry point with a host providing descriptions of the API
in-band by means of web links and forms.

By defining IoT-specific relation types, it is possible to drive
interactions through links instead of hardcoding URIs into a RESTful
client, thus making the system flexible enough for later changes.
The definition of the basic hypermedia formats for IoT is still work
in progress. However, some of the existing mechanisms can be reused,
such as resource discovery, forms, or links.

# Security Considerations {#section-7}

There were two types of security considerations discussed: use of formal data
models for security configuration, and security of data and data models in general.

It was observed that the security assumptions and configuration, or "security model", varies by ecosystem today,
making the job of a translator difficult.  For example, the types of security
principals (e.g., user vs. device vs. application), the use of access control lists (ACLs) vs. capabilities,
and what types of policies can be expressed, all vary by ecosystem.  As a result,
the security model architecture generally dictates where translation can be done.

One approach discussed was whether two endpoints might be able to use some overlay
security model, across a translator between two ecosystems, which only works if
the two endpoints agree on a common data model for their communication.  Another approach
discussed was simply having a translator act as a trusted intermediary, which allows
the translator to be able to translate between different data models.

One suggestion discussed was potentially adding metadata into either the
formal data model language, or accompanying the data values over the wire, tagging
the data with privacy levels.  However, sometimes even the privacy level of information
might itself be sensitive.  Still, it was observed that being able to dynamically
learn security requirements might help provide better UIs and translators.

# Collaboration {#section-8}

The participants discussed how best to share information among their various organizations.
One discussion was around having joint meetings. One current challenge reported was that
organizations were not aware of when and where each others' meetings were scheduled,
and sharing such information could help organizations better collocate meetings.
To facilitate this exchange, the participants agreed to add links to their respective
meeting schedules from a common page in the IOTSI repository {{IOTSIGIT}}.

Another challenge reported was that organizations did not know how to find each others'
published data models, and sharing such information could better facilitate reuse of the
same information model.  To facilitate this exchange, this participants discussed whether
a common repository might be used by multiple organizations.  The OCF's OneIoTa repository
was discussed as one possibility but it was reported that its terms of use at the time
of the workshop prevented this.  The OCF agreed to take this back and look at updating
the terms of use to allow other organizations to use it too, as the restriction was not
the intent.  Schema.org was discussed as another possibility.  In the meantime, the
participants agreed to add links to their respective repositories from a common page in
the IOTSI repository {{IOTSIGIT}}.

It was also agreed that the iotsi@iab.org mailing list would remain open and available
for sharing information between all relevant organizations.

# Acknowledgements {#section-9}

We would like to thank all paper authors and participants for their
contributions, and Ericsson for hosting the workshop.

# Appendix A: Program Committee {#section-10}

This workshop was organized by the following individuals: Jari Arkko,
Ralph Droms, Jaime Jiménez, Michael Koster, Dave Thaler, and Hannes
Tschofenig.

# Appendix B: Accepted Position Papers {#section-11}

* Jari Arkko, "Gadgets and Protocols Come and Go, Data Is Forever"
* Carsten Bormann, "Noise in specifications hurts"
* Benoit Claise, "YANG as the Data Modelling Language in the IoT space"
* Robert Cragie, "The ZigBee Cluster Library over IP"
* Dee Denteneer, Michael Verschoor, Teresa Zotti, "Fairhair: interoperable IoT services for major Building Automation and Lighting Control ecosystems"
* Universal Devices, "Object Oriented Approach to IoT Interoperability"
* Bryant Eastham, "Interoperability and the OpenDOF Project"
* Stephen Farrell, Alissa Cooper, "It's Often True: Security's Ignored (IOTSI) - and Privacy too"
* Christian Groves, Lui Yan, ang Weiwei, "Overview of IoT semantics landscape"
* Ted Hardie, "Loci of Interoperability for the Internet of Things"
* Russ Housley, "Vehicle-to-Vehicle and Vehicle-to-Infrastructure Communications"
* Jaime Jimenez, Michael Koster, Hannes Tschofenig, "IPSO Smart Objects"
* David Jones, IOTDB - "Interoperability Through Semantic Metastandards"
* Sebastian Kaebisch, Darko Anicic, "Thing Description as Enabler of Semantic Interoperability on the Web of Things"
* Achilleas Kemos, "Alliance for Internet of Things Innovation Semantic Interoperability Release 2.0, AIOTI WG03 - IoT Standardisation"
* Ari Keraenen, Cullen Jennings, "SenML: simple building block for IoT semantic interoperability"
* Dongmyoung Kim, Yunchul Choi, Yonggeun Hong, "Research on Unified Data Model and Framework to Support Interoperability between IoT Applications"
* Michael Koster, "Model-Based Hypertext Language"
* Matthias Kovatsch, Yassin N.  Hassan, Klaus Hartke, "Semantic Interoperability Requires self describing Interaction Models"
* Kai Kreuzer, "A Pragmatic Approach to Interoperability in the Internet of Things"
* Barry Leiba, "Position Paper"
* Marcello Lioy, "AllJoyn"
* Kerry Lynn, Laird Dornin, "Modeling RESTful APIs with JSON Hyper-Schema"
* Erik Nordmark, "Thoughts on IoT Semantic Interoperability: Scope of security issues"
* Open Geospatial Consortium, "OGC SensorThings API: Communicating "Where" in the Web of Things"
* Jean Paoli, Taqi Jaffri, "IoT Information Model Interoperability: An Open, Crowd-Sourced Approach in Three Parallel Parti"
* Joaquin Prado, "OMA Lightweight M2M Resource Model"
* Dave Raggett, Soumya Kanti Datta, "Input paper for IAB Semantic Interoperability Workshop"
* Pete Rai, Stephen Tallamy, "Semantic Overlays Over Immutable Data to Facilitate Time and Context Specific Interoperability"
* Jasper Roes, Laura Daniele, "Towards semantic interoperability in the IoT using the Smart Appliances REFerence ontology (SAREF) and its extensions"
* Max Senges, "Submission for IAB IoT Sematic Interoperability workshop"
* Bill Silverajan, Mert Ocak, Jaime Jimenez, "Implementation Experiences of Semantic Interoperability for RESTful Gateway Management"
* Ned Smith, Jeff Sedayao, Claire Vishik, "Key Semantic Interoperability Gaps in the Internet-of-Things Meta-Models"
* Robert Sparks and Ben Campbell, "Considerations for certain IoT based services"
* J.  Clarke Stevens, "Open Connectivity Foundation oneIoTa Tool"
* J.  Clarke Stevens, Piper Merriam, "Derived Models for Interoperability Between IoT Ecosystems"
* Ravi Subramaniam, "Semantic Interoperability in Open Connectivity Foundation (OCF) - formerly Open Interconnect Consortium (OIC)""
* Andrew Sullivan, "Position paper for IOTSI workshop"
* Darshak Thakore, "IoT Security in the context of Semantic Interoperability"
* Dave Thaler, "IoT Bridge Taxonomy"
* Dave Thaler, S"ummary of AllSeen Alliance Work Relevant to Semantic Interoperability"
* Mark Underwood, Michael Gruninger, Leo Obrst, Ken Baclawski, Mike Bennett, Gary Berg-Cross, Torsten Hahmann, Ram Sriram, "Internet of Things: Toward Smart Networked Systems and Societies"
* Peter van der Stok, Andy Bierman, "YANG-Based Constrained Management Interface (CoMI)"

# Appendix C: List of Participants {#section-12}

* Andy Bierman, YumaWorks
* Carsten Bormann, Uni Bremen/TZI
* Ben Campbell, Oracle
* Benoit Claise, Cisco
* Alissa Cooper, Cisco
* Robert Cragie, ARM Limited
* Laura Daniele, TNO
* Bryant Eastham, OpenDof
* Christian Groves, Huawei
* Ted Hardie, Google
* Yonggeun Hong, ETRI
* Russ Housley, Vigil Security
* David Janes, IOTDB
* Jaime Jimenez, Ericsson
* Shailendra Karody, Catalina Labs
* Ari Keraenen, Ericsson
* Michael Koster, SmartThings
* Matthias Kovatsch, Siemens
* Kai Kreuzer, Deutsche Telekom
* Barry Leiba, Huawei
* Steve Liang, Uni Calgary
* Marcello Lioy, Qualcomm
* Kerry Lynn, Verizon
* Mayan Mathen, Catalina Labs
* Erik Nordmark, Arista
* Jean Paoli, Microsoft
* Joaquin Prado, OMA
* Dave Raggett, W3C
* Max Senges, Google
* Ned Smith, Intel
* Robert Sparks, Oracle
* Ram Sriram, NIST
* Clarke Stevens
* Ram Subramanian, Intel
* Andrew Sullivan, DIN
* Darshak Thakore, Cablelabs
* Dave Thaler, Microsoft
* Hannes Tschofenig, ARM Limited
* Michael Verschoor, Philips Lightning

--- back
